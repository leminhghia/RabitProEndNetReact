// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250404021442_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("Backend.Models.BienTheSanPham", b =>
                {
                    b.Property<int>("BienTheId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GhiChu")
                        .HasColumnType("TEXT");

                    b.Property<float>("GiaBan")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsActived")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MauSac")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NgaySua")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("TEXT");

                    b.Property<string>("NguoiSua")
                        .HasColumnType("TEXT");

                    b.Property<string>("NguoiTao")
                        .HasColumnType("TEXT");

                    b.Property<int>("SanPhamId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SoLuong")
                        .HasColumnType("INTEGER");

                    b.HasKey("BienTheId");

                    b.HasIndex("SanPhamId");

                    b.ToTable("BienTheSanPham");
                });

            modelBuilder.Entity("Backend.Models.DanhMuc", b =>
                {
                    b.Property<int>("DanhMucId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GhiChu")
                        .HasColumnType("TEXT");

                    b.Property<byte>("IsActived")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("NgaySua")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("TEXT");

                    b.Property<string>("NguoiSua")
                        .HasColumnType("TEXT");

                    b.Property<string>("NguoiTao")
                        .HasColumnType("TEXT");

                    b.Property<string>("TenDanhMuc")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("DanhMucId");

                    b.ToTable("DanhMuc");
                });

            modelBuilder.Entity("Backend.Models.DanhMuc_SanPham", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DanhMucId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("TEXT");

                    b.Property<int>("SanPhamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DanhMucId");

                    b.HasIndex("SanPhamId");

                    b.ToTable("DanhMuc_SanPham");
                });

            modelBuilder.Entity("Backend.Models.HinhAnhSanPham", b =>
                {
                    b.Property<int>("HinhAnhId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BienTheId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GhiChu")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActived")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("NgaySua")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("TEXT");

                    b.Property<string>("NguoiSua")
                        .HasColumnType("TEXT");

                    b.Property<string>("NguoiTao")
                        .HasColumnType("TEXT");

                    b.Property<string>("URLHinhAnh")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("HinhAnhId");

                    b.HasIndex("BienTheId");

                    b.ToTable("HinhAnhSanPham");
                });

            modelBuilder.Entity("Backend.Models.SanPham", b =>
                {
                    b.Property<int>("SanPhamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GhiChu")
                        .HasColumnType("TEXT");

                    b.Property<float>("GiaGoc")
                        .HasColumnType("REAL");

                    b.Property<byte>("IsActived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MoTa")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NgaySua")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("TEXT");

                    b.Property<string>("TenSanPham")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SanPhamId");

                    b.ToTable("SanPham");
                });

            modelBuilder.Entity("Backend.Models.ThuongHieu", b =>
                {
                    b.Property<int>("ThuongHieuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GhiChu")
                        .HasColumnType("TEXT");

                    b.Property<byte>("IsActived")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("NgaySua")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("TEXT");

                    b.Property<string>("NguoiSua")
                        .HasColumnType("TEXT");

                    b.Property<string>("NguoiTao")
                        .HasColumnType("TEXT");

                    b.Property<string>("TenThuongHieu")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ThuongHieuId");

                    b.ToTable("ThuongHieu");
                });

            modelBuilder.Entity("Backend.Models.ThuongHieu_SanPham", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("TEXT");

                    b.Property<int>("SanPhamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ThuongHieuId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SanPhamId");

                    b.HasIndex("ThuongHieuId");

                    b.ToTable("ThuongHieu_SanPham");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "683ef5e6-a3c9-4be0-bded-0b64256e9f0a",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = "7afca44c-517f-4632-b41e-cc774c90d0b4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Backend.Models.BienTheSanPham", b =>
                {
                    b.HasOne("Backend.Models.SanPham", "SanPham")
                        .WithMany("BienTheSanPham")
                        .HasForeignKey("SanPhamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SanPham");
                });

            modelBuilder.Entity("Backend.Models.DanhMuc_SanPham", b =>
                {
                    b.HasOne("Backend.Models.DanhMuc", "DanhMuc")
                        .WithMany("DanhMuc_SanPham")
                        .HasForeignKey("DanhMucId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.SanPham", "SanPham")
                        .WithMany("DanhMuc_SanPham")
                        .HasForeignKey("SanPhamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DanhMuc");

                    b.Navigation("SanPham");
                });

            modelBuilder.Entity("Backend.Models.HinhAnhSanPham", b =>
                {
                    b.HasOne("Backend.Models.BienTheSanPham", "BienTheSanPham")
                        .WithMany("HinhAnhSanPham")
                        .HasForeignKey("BienTheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BienTheSanPham");
                });

            modelBuilder.Entity("Backend.Models.ThuongHieu_SanPham", b =>
                {
                    b.HasOne("Backend.Models.SanPham", "SanPham")
                        .WithMany("ThuongHieu_SanPham")
                        .HasForeignKey("SanPhamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.ThuongHieu", "ThuongHieu")
                        .WithMany("ThuongHieu_SanPham")
                        .HasForeignKey("ThuongHieuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SanPham");

                    b.Navigation("ThuongHieu");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Models.BienTheSanPham", b =>
                {
                    b.Navigation("HinhAnhSanPham");
                });

            modelBuilder.Entity("Backend.Models.DanhMuc", b =>
                {
                    b.Navigation("DanhMuc_SanPham");
                });

            modelBuilder.Entity("Backend.Models.SanPham", b =>
                {
                    b.Navigation("BienTheSanPham");

                    b.Navigation("DanhMuc_SanPham");

                    b.Navigation("ThuongHieu_SanPham");
                });

            modelBuilder.Entity("Backend.Models.ThuongHieu", b =>
                {
                    b.Navigation("ThuongHieu_SanPham");
                });
#pragma warning restore 612, 618
        }
    }
}
